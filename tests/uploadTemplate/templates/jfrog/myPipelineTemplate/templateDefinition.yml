resources:
  #GIT RESOURCES
  - name: artifactory_monorepo_bitbucket_danielt_poc
    type: GitRepo
    configuration:
      path: jfrog/artifactory
      gitProvider: JFrog_bitbucket
      branches:
        include: {{ .Values.GitRepo.gitBranch}}
      files:
        exclude:  ^(access-go-client/_cli)\/.*$
  - name: artifactory_release_bitbucket_danielt_poc
    type: GitRepo
    configuration:
      path: jfrog/artifactory
      gitProvider: JFrog_bitbucket
      branches:
        include: {{ .Values.GitRepo.gitBranch}}
      buildOn:
        commit: false
  - name: post_release_property_bag_danielt_poc
    type: PropertyBag
    configuration:
      default: -1
  - name: artifactory_monorepo_release_services_properties_danielt_poc
    type: PropertyBag
    configuration:
      last_released_run_number: -1
  - name: artifactory_pro_art_jfrog_io_docker_image_danielt_poc
    type: Image
    configuration:
      registry: art_jfrog_io
      sourceRepository: art-docker-dev-local
      imageName: jfrog/artifactory-pro
      imageTag: undefined
      autoPull: false
  - name: router_art_jfrog_io_docker_image_danielt_poc
    type: Image
    configuration:
      registry: art_jfrog_io
      sourceRepository: art-docker-dev-local
      imageName: jfrog/router
      imageTag: undefined
      autoPull: false

pipelines:
- name: Pipeline_10390_005
  configuration:
    environmentVariables:
      readOnly:
        GIT_BRANCH: ""
        CI: "true"
  steps:
  - name: pipeline_helm_step_001
    type: Bash
    configuration:
      chronological: true
      environmentVariables:
        INCREMENT_MILESTONE: "true"
        SERVICES_TO_RELEASE: ""
        FORCE_RELEASE: "false"
      priority: 1
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
      outputResources:
        - name: artifactory_monorepo_release_services_properties_danielt_poc
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - stepCommons_load_script build/ci/scripts/lib/releaseUtils.sh
        - release_validateReleaseBranch
        - add_run_variables VERSION_ENV_VARS_TO_SKIP="$(release_getListOfEnvVarsToSkip)"
      #  - release_verifyServicesPreReleaseVersionInPomMatchBranchName "${GIT_BRANCH}"
        #Exporting GLOBAL_CREATION_TIME will set the same creation time for all generated versionYaml files
        - export GLOBAL_CREATION_TIME=$(common_getTimestamp)
      onExecute:
        - release_addRunVarsWithNewVersion "artifactory" "${INCREMENT_MILESTONE}"
        - release_uploadVersionYamlForChangedServices "${INCREMENT_MILESTONE}"
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

  - name: create_release_branch
    type: Bash
    configuration:
      priority: 1
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
        - name: artifactory_monorepo_release_services_properties_danielt_poc
          newVersionOnly: true
      integrations:
        - name: jfdev_agent
        - name: artifactory_bitbucket_push
        - name: slack_platform_release_pipeline
        - name: docker_jfrog_io_reader
        - name: entplus_deployer
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - pushd ${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}
        - git config core.sshCommand "ssh -i ~/.ssh/artifactory_bitbucket_push -F /dev/null"
        - git checkout ${GIT_BRANCH}
      onExecute:
        - git checkout -b ${AD_HOC_RELEASE_BRANCH_NAME}
        - git push origin ${AD_HOC_RELEASE_BRANCH_NAME}
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success


  - name: check_repositories_exist
    type: Bash
    configuration:
      timeoutSeconds: 300
      priority: 1
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
      inputSteps:
        - name: create_release_branch
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - pushd ${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts
        - git checkout ${AD_HOC_RELEASE_BRANCH_NAME}
      onExecute:
        - ./checkRepositories.sh ${AD_HOC_RELEASE_BRANCH_NAME}
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

  - name: wait_for_branch_sync
    type: Bash
    configuration:
      timeoutSeconds: 900
      priority: 1
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
      integrations:
        - name: jfdev_agent
        - name: entplus_pipelines
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
      inputSteps:
        - name: create_release_branch
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - pushd ${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts
      onExecute:
        - ./checkBranchSynced.sh "jfrog/artifactory" ${AD_HOC_RELEASE_BRANCH_NAME}
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

  - name: modify_release_versions
    type: Bash
    configuration:
      priority: 1
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
      integrations:
        - name: jfdev_agent
        - name: artifactory_bitbucket_push
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
      inputSteps:
        - name: check_repositories_exist
        - name: wait_for_branch_sync
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - stepCommons_load_script build/ci/scripts/lib/releaseUtils.sh
        - pushd ${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts
        - git config core.sshCommand "ssh -i ~/.ssh/artifactory_bitbucket_push -F /dev/null"
        - git checkout ${AD_HOC_RELEASE_BRANCH_NAME}
      onExecute:
        - ./modifyReleases.sh
      onSuccess:
        - stepCommons_on_success
        - list_of_released_services="$(release_getServiceNamesFromReleaseManifest)"
        - git commit -m "DEVF-502 - Update release versions - ${list_of_released_services}"
        - git push origin ${AD_HOC_RELEASE_BRANCH_NAME}
      onFailure:
        - stepCommons_on_failure

  - name: release_process_links
    type: Bash
    configuration:
      priority: 1
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
      inputResources:
        - name: artifactory_monorepo_bitbucket_danielt_poc
          trigger: false
      inputSteps:
        - name: modify_release_versions
    execution:
      onStart:
        - source "${res_artifactory_monorepo_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
      onExecute:
        - |
          echo "Links to Build and Post release pipelines"
          artifactory_url=$(echo ${int_entplus_deployer_url%/artifactory})
          encoded_branch=$(sed 's~/~%2F~g' <<< ${AD_HOC_RELEASE_BRANCH_NAME})
          echo "Build Pipeline: ${artifactory_url}/ui/pipelines/myPipelines/default/artifactory_monorepo_build?branch=${encoded_branch}"
          echo "Post Release Pipeline: ${artifactory_url}/ui/pipelines/myPipelines/default/artifactory_monorepo_post_release?branch=${encoded_branch}"
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

- name: Pipeline_10390_Helm_001
  steps:
  - name: promote_builds_to_staging_repositories
    type: Bash
    configuration:
      priority: 1
      inputResources:
        - name: artifactory_release_bitbucket_danielt_poc
          trigger: true
        - name: artifactory_pro_art_jfrog_io_docker_image_danielt_poc
          trigger: false
        - name: router_art_jfrog_io_docker_image_danielt_poc
          trigger: false
      outputResources:
        - name: post_release_property_bag_danielt_poc
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
    execution:
      onStart:
        - source "${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - source ${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/buildInfoUtils.sh
        - stepCommons_load_script build/ci/scripts/lib/pipelineUtils.sh
        - stepCommons_load_script build/ci/scripts/lib/releaseUtils.sh
      onExecute:
        - buildInfo_promoteBuilds "staging"
        - artifactory_version=$(pipeline_imageTag "artifactory_pro_art_jfrog_io_docker_image") # need to send versions as parameters to thanos
        - router_version=$(pipeline_imageTag "router_art_jfrog_io_docker_image")
        - branch=$(release_getSourceBranchOfServiceFromServiceVersionYaml "artifactory" "${artifactory_version}")
        - write_output post_release_property_bag artifactory_version="${artifactory_version}" branch="${branch}"
        - write_output post_release_property_bag router_version="${router_version}" branch="${branch}"
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

    # If we decide to wait until the jenkins job is completed successfully before we do the promotion
    #  - name: trigger_jenkins_milestone_release
    #    type: Jenkins
    #    configuration:
    #      integrations:
    #        - name: jenkins_entplus_ci
    #      inputResources:
    #        - name: post_release_property_bag
    #      jenkinsJobName: artifactory/release/milestone-release
    #      jenkinsBranchName: ${res_post_release_property_bag_branch}
    #      buildParameters:
    #        artifactory_version: ${res_post_release_property_bag_version}

  - name: thanos
    type: Jenkins
    configuration:
      integrations:
        - name: jenkins_entplus_ci
        - name: jfdev_agent
      inputResources:
        - name: post_release_property_bag_danielt_poc
      inputSteps:
        - name: promote_builds_to_staging_repositories
      jenkinsJobName: platform/job/test/job/thanos-setup
      jenkinsBranchName: master
      buildParameters:
        ARTIFACTORY: ${res_post_release_property_bag_danielt_poc_artifactory_version}
        ROUTER: ${res_post_release_property_bag_danielt_poc_router_version}
        MARK_ON_SUCCESS: "true"

  - name: promote_builds_to_release_repositories
    type: Bash
    configuration:
      priority: 1
      inputResources:
        - name: artifactory_release_bitbucket_danielt_poc
          trigger: true
      inputSteps:
        - name: thanos
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
    execution:
      onStart:
        - source "${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - source ${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/buildInfoUtils.sh
      onExecute:
        - buildInfo_promoteBuilds "release"
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success

  - name: tag_releases
    type: Bash
    configuration:
      priority: 1
      inputResources:
        - name: artifactory_release_bitbucket_danielt_poc
          trigger: true
      inputSteps:
        - name: promote_builds_to_release_repositories
      integrations:
        - name: jfdev_agent
        - name: artifactory_bitbucket_push
        - name: docker_jfrog_io_reader
        - name: entplus_deployer
        - name: slack_platform_release_pipeline
    execution:
      onStart:
        - source "${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - pushd ${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts
        - git config core.sshCommand "ssh -i ~/.ssh/artifactory_bitbucket_push -F /dev/null"
      onExecute:
        - ./tagReleases.sh
        - git push --tags
        - popd
      onSuccess:
        - stepCommons_on_success
      onFailure:
        - stepCommons_on_failure

  - name: post_successful_release_steps
    type: Bash
    configuration:
      inputResources:
        - name: artifactory_release_bitbucket_danielt_poc
          trigger: true
      inputSteps:
        - name: tag_releases
      integrations:
        - name: jfdev_agent
        - name: entplus_deployer
        - name: docker_jfrog_io_reader
        - name: slack_platform_release_pipeline
    execution:
      onStart:
        - source "${res_artifactory_release_bitbucket_danielt_poc_resourcePath}/build/ci/scripts/lib/pipelineStepCommons.sh"
        - stepCommons_load_script build/ci/scripts/lib/releaseUtils.sh
      onExecute:
        - release_postReleaseActions
      onFailure:
        - stepCommons_on_failure
      onSuccess:
        - stepCommons_on_success
