

valuesFilePath: values.yml

# Template Variables Section
# -----------------------------------------------------------------------------------------
{{ $serviceName := .Values.metadata.serviceName }}
{{ $os := default "linux" .Values.metadata.os }}
{{ $stepType := ternary "PowerShell" "Bash" (eq $os "windows") }}
{{ $gitResName := print $serviceName "_git_source" }}
{{ $codeQualityResourceName := print $serviceName "_code_quality_result" }}
{{ $buildInfoResultResName := print $serviceName "_build_result" }}
{{ $xrayScanOutputResource := print $serviceName "_xray_result" }}
{{ $automationResultResName := print $serviceName "_automation_result" }}
{{ $buildInfoGoPublish := print $serviceName "_build_info" }}
{{ $cronResName := print $serviceName "_cron" }}
{{ $pipelineName := print $serviceName "_build" }}
{{ $unitTestResName := print $serviceName "unit_test_build" }}
{{ $appName := print $serviceName }}
{{ $rootDirectory := ternary (print "/" .Values.configurations.sourceDirectory) "" (not (eq "" .Values.configurations.sourceDirectory)) }}
{{ $isTargetRepoAvailable := default false (and .Values.configurations .Values.configurations.targetRepository) }}

# Steps optional settings
{{- $isLintEnabled := default true .Values.configurations.steps.lint.enabled }}
{{- $isQualityEnabled := default true .Values.configurations.steps.codeQuality.enabled }}
{{- $isAutomationEnabled := default true .Values.configurations.steps.automation.enabled }}
{{- $isBuildEnabled := default true .Values.configurations.steps.build.enabled }}
{{- $isPublishEnabled := default true .Values.configurations.steps.publish.enabled }}
{{- $isXrayScanEnabled := default true .Values.configurations.steps.scan.enabled }}

# Git repo resource
{{ define "res.gitRepo.config" }}
  {{ range $key, $value := .Values.inputs.sourceRepository }}
  {{ $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
  {{ if (eq $isObject false )}}
      {{ $key }}: {{ $value }}
  {{ else }}
      {{ $key }}:
  {{ range $depthKey, $depthValue := $value }}
        {{ $depthKey }}: {{ $depthValue }}
  {{ end }}
  {{ end }}
  {{ end }}
{{ end }}

# Notifications
{{ $isNotificationsAvailable := default false .Values.notifications }}
{{ $isEmailNotificationsAvailable := default false (and $isNotificationsAvailable .Values.notifications.email) }}
{{ $isSlackNotificationsAvailable := default false (and $isNotificationsAvailable .Values.notifications.slack) }}

# -----------------------------------------------------------------
# Reusable templates
# These are resolved using 'template' thus indentation is important
# -----------------------------------------------------------------
{{ $resultResources := dict "codeQualityResourceName" $codeQualityResourceName "buildInfoResultResName" $buildInfoResultResName "buildInfoGoPublish" $buildInfoGoPublish}}
{{ $templateParams := merge $resultResources (dict "values" .Values "gitResName" $gitResName "rootDirectory" $rootDirectory "stepType" $stepType) }}

{{ $isControlsAvailable := default false .Values.controls }}
{{ $isTriggerByAvailable := default false (and $isControlsAvailable .Values.controls.triggerBy) }}
{{ $isGitTriggerEnabled := default false (and $isTriggerByAvailable (eq .Values.controls.triggerBy.sourceRepository true)) }}
{{ $isExternalTriggerAvailable := default false (and $isTriggerByAvailable .Values.controls.triggerBy.externalResources) }}
{{ $isCronTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.cron (eq .Values.controls.triggerBy.cron.enabled true)) }}
{{ $isWebhookTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.incomingWebhooks) }}
# Steps shared onStart template
{{ define "step.shared.onStart.command" }}
  {{ $ := . }}
            {{ if $.conf }}
            {{- range $cmd := $.conf.commands.onStart }}
            - {{ $cmd }}
            {{- end }}
            {{ end }}
{{ end }}

# Steps shared onExecute template
{{ define "step.shared.onExecute.command" }}
  {{ $ := . }}
            {{ if $.conf }}
            {{- range $cmd := $.conf.commands.onExecute }}
            - {{ $cmd }}
            {{- end }}
            {{ end }}
{{ end }}

# Steps shared onFailure template
{{ define "step.shared.onFailure.command" }}
  {{ $ := . }}
            {{ if $.conf }}
            {{- range $cmd := $.conf.commands.onFailure }}
            - {{ $cmd }}
            {{- end }}
            {{ end }}
{{ end }}

# Steps shared onSuccess template
{{ define "step.shared.onSuccess.command" }}
  {{ $ := . }}
            {{ if $.conf }}
            {{- range $cmd := $.conf.commands.onSuccess }}
            - {{ $cmd }}
            {{- end }}
            {{ end }}
{{ end }}

# Steps shared onComplete template
{{ define "step.shared.onComplete.command" }}
  {{ $ := . }}
            {{ if $.conf }}
            {{- range $cmd := $.conf.commands.onComplete }}
            - {{ $cmd }}
            {{- end }}
            {{ end }}
{{ end }}

# Update current timestamp in result resource
{{ define "step.shared.utility.timestamp" }}
  {{ if eq $.stepType "linux" }}
  - STEP_TIMESTAMP=$(date +%s)
  {{ else }}
  - $STEP_TIMESTAMP=[int](Get-Date -UFormat %s -Millisecond 0)
  {{ end }}
  - write_output {{ $.resultResource }} "timestamp=$STEP_TIMESTAMP"
{{ end }}

# codeQuality onStart
{{ define "step.codeQuality.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# codeQuality onExecute
{{ define "step.codeQuality.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# codeQuality onFailure
{{ define "step.codeQuality.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# codeQuality onSuccess
{{ define "step.codeQuality.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# codeQuality onComplete
{{ define "step.codeQuality.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}

# lint onStart
{{ define "step.lint.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# lint onExecute
{{ define "step.lint.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# lint onFailure
{{ define "step.lint.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# lint onSuccess
{{ define "step.lint.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# lint onComplete
{{ define "step.lint.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}

# scan onStart
{{ define "step.scan.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# scan step
{{ define "step.scan.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ if eq $.stepType "windows" }}
            - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
            {{ else }}
            - curl -fL https://install-cli.jfrog.io | sh
            {{ end }}
            {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# scan onFailure
{{ define "step.scan.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# scan onSuccess
{{ define "step.scan.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# scan onComplete
{{ define "step.scan.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}

# build onStart
{{ define "step.build.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# build step
{{ define "step.build.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            {{ if eq $.stepType "windows" }}
            - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
            {{ else }}
            - curl -fL https://install-cli.jfrog.io | sh
            {{ end }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# build onFailure
{{ define "step.build.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# build onSuccess
{{ define "step.build.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# build onComplete
{{ define "step.build.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}

# automation onStart
{{ define "step.automation.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# automation step
{{ define "step.automation.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# automation onFailure
{{ define "step.automation.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# automation onSuccess
{{ define "step.automation.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# automation onComplete
{{ define "step.automation.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}

# publish onStart
{{ define "step.publish.onStart" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onStart.command" $ }}
{{ end }}

# publish step
{{ define "step.publish.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoGoPublish }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ if eq $.stepType "windows" }}
            - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
            {{ else }}
            - curl -fL https://install-cli.jfrog.io | sh
            {{ end }}
            {{ template "step.shared.onExecute.command" $ }}
            - write_output {{ $.resultResource }} "buildName=$JFROG_CLI_BUILD_NAME"
            - write_output {{ $.resultResource }} "buildNumber=$JFROG_CLI_BUILD_NUMBER"
{{ end }}

# publish onFailure
{{ define "step.publish.onFailure" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onFailure.command" $ }}
{{ end }}

# publish onSuccess
{{ define "step.publish.onSuccess" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onSuccess.command" $ }}
{{ end }}

# publish onComplete
{{ define "step.publish.onComplete" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.onComplete.command" $ }}
{{ end }}
# -----------------------------------------------------------------------------------------

# Resource definition
resources:
  - name: {{ $gitResName }}
    type: GitRepo
    configuration:
      {{ template "res.gitRepo.config" . }}
    
  - name: {{ $codeQualityResourceName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $unitTestResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoResultResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $automationResultResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $xrayScanOutputResource }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoGoPublish }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.inputs.integrations.artifactory }}
      buildName: ''
      buildNumber: ''

  {{ if $isCronTriggerEnabled }}
  - name: {{ $cronResName }}
    type: CronTrigger
    configuration:
      interval: '{{ .Values.controls.triggerBy.cron.expression }}'
  {{ end }}

  {{ if $isWebhookTriggerEnabled }}
  {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
  - name: "{{ $serviceName }}_webhook_{{ $webhook.webhookName }}"
    type: IncomingWebhook
    configuration:
      webhookName: {{ $webhook.webhookName }}
  {{ end }}
  {{ end }}

# pipelines section
pipelines:
  - name: {{ $pipelineName }}
    configuration:
      {{- if .Values.configurations.jfrogCliVersion }}
      jfrogCliVersion: {{ .Values.configurations.jfrogCliVersion }}
      {{- end }}
      runtime:
        type: image
        image:
          {{ if .Values.metadata.runtime }}
          custom:
          {{ range $key, $value := .Values.metadata.runtime }}
            {{ $key }}: {{ $value }}
          {{ end }}
          {{ else }}
          auto:
            language: go
            versions:
              - {{ .Values.metadata.goVersion }}
          {{ end }}
      {{ if .Values.metadata.nodePool }}
      nodePool: {{ .Values.metadata.nodePool }}
      {{ end }}
      integrations:
        - name: {{ .Values.inputs.integrations.artifactory }}
        {{ if $isEmailNotificationsAvailable }}
        - name: {{ .Values.notifications.email.integrationName }}
        {{ end }}
        {{ if $isSlackNotificationsAvailable }}
        - name: {{ .Values.notifications.slack.integrationName }}
        {{ end }}
    steps:
      - name: trigger_all
        type: {{ $stepType }}
        {{ if (or $isExternalTriggerAvailable $isCronTriggerEnabled $isWebhookTriggerEnabled) }}
        configuration:
          inputResources:
            # Enable trigger options via external resources
              {{ if $isExternalTriggerAvailable }}
              {{- range $resource := .Values.controls.triggerBy.externalResources }}
              - name: '{{ $resource.resourceName }}'
              {{- end }}
              {{ end }}

              # Enable cron trigger
              {{ if $isCronTriggerEnabled }}
              - name: {{ $cronResName }}
              {{ end }}

              # Enable incoming webhook triggers
              {{ if $isWebhookTriggerEnabled }}
              {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
              - name: "{{ $serviceName }}_webhook_{{ $webhook.webhookName }}"
              {{- end }}
              {{ end }}
        {{ end }}
        execution:
          onExecute:
            - end_step success

      {{- if $isQualityEnabled }}
      - name: code_quality
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $codeQualityResourceName }}
        execution:
          onStart:
            {{ template "step.codeQuality.onStart" $templateParams }}
          onExecute:
            {{ template "step.codeQuality.onExecute" $templateParams }}
          onFailure:
            {{ template "step.codeQuality.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.codeQuality.onSuccess" $templateParams }}
          onComplete:
            {{ template "step.codeQuality.onComplete" $templateParams }}
      {{- end }}

      {{- if $isLintEnabled }}
      - name: lint
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $codeQualityResourceName }}
        execution:
          onStart:
            {{ template "step.lint.onStart" $templateParams }}
          onExecute:
            {{ template "step.lint.onExecute" $templateParams }}
          onFailure:
            {{ template "step.lint.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.lint.onSuccess" $templateParams }}
          onComplete:
            {{ template "step.lint.onComplete" $templateParams }}
      {{- end }}

      {{- if $isBuildEnabled }}
      - name: go_build
        type: {{ $stepType }}
        configuration:
          inputSteps:
          {{- if $isQualityEnabled }}
            - name: code_quality
          {{- end }}
          {{- if $isLintEnabled }}
            - name: lint
          {{- end }}
          {{- if and (not $isLintEnabled) (not $isQualityEnabled) }}
            - name: trigger_all
          {{- end }}
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
          environmentVariables:
            appName: {{ $appName }}
        execution:
          onStart:
            {{ template "step.build.onStart" $templateParams }}
          onExecute:
            {{ template "step.build.onExecute" $templateParams }}
          onFailure:
            {{ template "step.build.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.build.onSuccess" $templateParams }}
          onComplete:
            {{ template "step.build.onComplete" $templateParams }}
      {{- end }}

      {{- if $isXrayScanEnabled }}
      - name: xray_scan
        type: {{ $stepType }}
        configuration:
          inputResources:
            - name: {{ $buildInfoResultResName }}
          outputResources:
            - name: {{ $xrayScanOutputResource }}
          integrations:
            - name: {{ .Values.inputs.integrations.artifactory }}
        execution:
          onStart:
            {{ template "step.scan.onStart" $templateParams }}
          onExecute:
            {{ template "step.scan.onExecute" $templateParams }}
          onFailure:
            {{ template "step.scan.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.scan.onSuccess" $templateParams }}
          onComplete:
            {{ template "step.scan.onComplete" $templateParams }}
      {{- end }}

      {{- if $isAutomationEnabled }}
      - name: automation_test
        type: {{ $stepType }}
        configuration:
          inputSteps:
            {{- if $isBuildEnabled }}
            - name: go_build
            {{- end }}
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $automationResultResName }}
        execution:
          onStart:
            {{ template "step.automation.onStart" $templateParams }}
          onExecute:
            {{ template "step.automation.onExecute" $templateParams }}
          onFailure:
            {{ template "step.automation.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.automation.onSuccess" $templateParams }}
          onComplete:
            {{ template "step.automation.onComplete" $templateParams }}
      {{- end }}

      {{- if $isPublishEnabled }}
      - name: go_publish
        type: {{ $stepType }}
        configuration:
          inputSteps:
             {{- if $isAutomationEnabled }}
            - name: automation_test
            {{- end }}
            {{- if $isXrayScanEnabled }}
            - name: xray_scan
            {{- end }}
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $buildInfoGoPublish }}
          integrations:
            - name: {{ .Values.inputs.integrations.artifactory }}
          environmentVariables:
            appName: {{ $appName }}
            {{ if $isTargetRepoAvailable }}
            targetRepository: {{ .Values.configurations.targetRepository }}
            {{ end }}
        execution:
          onStart:
            {{ template "step.publish.onStart" $templateParams }}
          onExecute:
            {{ if $isTargetRepoAvailable }}
            {{ template "step.publish.onExecute" $templateParams }}
            {{ end }}
          onFailure:
            {{ template "step.publish.onFailure" $templateParams }}
          onSuccess:
            {{ template "step.publish.onSuccess" $templateParams }}
          onComplete:
            {{ if $isSlackNotificationsAvailable }}
            - send_notification  {{ .Values.notifications.slack.integrationName }} --text "Successful Pipeline - $pipeline_name | Step - $step_name \n Committer - <$committer> \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url"
            {{ end }}
      {{- end }}
