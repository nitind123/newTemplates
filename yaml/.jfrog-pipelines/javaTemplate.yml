valuesFilePath: values.yml
# Template Variables

# Names
{{- $packageName := .Values.metadata.packageName }}
{{- $os := default "linux" .Values.metadata.os }}
{{- $javaVersion := default "17" .Values.metadata.java }}
{{- $jfrogCliVersion := default 2 .Values.metadata.jfrogCliVersion }}
{{- $stepType := ternary "PowerShell" "Bash" (eq $os "windows") }}
{{- $gitResName := print $packageName "_git_source" }}
{{- $codeQualityResName := print $packageName "_code_quality_result" }}
{{- $unitTestResName := print $packageName "_unit_test_result" }}
{{- $buildInfoResultResName := print $packageName "_build_result" }}
{{- $buildInfoResName := print $packageName "_build_info" }}
{{- $cronResName := print $packageName "_cron" }}
{{- $pipelineName := print $packageName "_build" }}
{{- $rootDirectory := ternary (print "/" .Values.configurations.sourceFolder) "" (not (eq "" .Values.configurations.sourceFolder)) }}

# Build Trigger
{{- $buildTool := default "maven" .Values.configurations.buildTool }}
{{- $isControlsAvailable := default false .Values.controls }}
{{- $isTriggerByAvailable := default false (and $isControlsAvailable .Values.controls.triggerBy) }}
{{- $isGitTriggerEnabled := default false (and $isTriggerByAvailable (eq .Values.controls.triggerBy.sourceRepository true)) }}
{{- $isExternalTriggerAvailable := default false (and $isTriggerByAvailable .Values.controls.triggerBy.externalResources) }}
{{- $isCronTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.cron (eq .Values.controls.triggerBy.cron.enabled true)) }}
{{- $isWebhookTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.incomingWebhooks) }}

# Pipeline settings
{{- $isRetentionEnabled := .Values.metadata.retentionPolicy }}

# Steps settings
{{- $isLintEnabled := default true .Values.configuration.lint.enabled }}
{{- $isQualityEnabled := default true .Values.configuration.codeQuality.enabled }}
{{- $isTestEnabled := default true .Values.configuration.test.enabled }}
{{- $isBuildEnabled := default true .Values.configuration.build.enabled }}
{{- $isPublishEnabled := default true .Values.configuration.publish.enabled }}
{{- $isXrayScanEnabled := default true .Values.configuration.xrayScan.enabled }}

# Logging
{{- $isDebugLogsEnabled := and $isControlsAvailable .Values.controls.logging (eq true .Values.controls.logging.enableDebug) }}

# Exporting
{{- $isExportingEnabled := and $isControlsAvailable .Values.controls.exporting (eq true .Values.controls.exporting.enabled) }}

# Notifications
{{- $isNotificationsAvailable := default false (and $isControlsAvailable .Values.controls.notifications) }}
{{- $isEmailNotificationsAvailable := default false (and $isNotificationsAvailable .Values.controls.notifications.email) }}
{{- $isSlackNotificationsAvailable := default false (and $isNotificationsAvailable .Values.controls.notifications.slack) }}

# -----------------------------------------------------------------
# Reusable templates
# These are resolved using 'template' thus indentation is important
# -----------------------------------------------------------------
{{- $resultResources := dict "codeQualityResName" $codeQualityResName "unitTestResName" $unitTestResName "buildInfoResultResName" $buildInfoResultResName "buildInfoResName" $buildInfoResName }}
{{- $templateParams := merge $resultResources (dict "values" .Values "gitResName" $gitResName "rootDirectory" $rootDirectory "buildTool" $buildTool "stepType" $stepType) }}

# Git repo resource
{{- define "res.gitRepo.config" }}
  {{- range $key, $value := .Values.inputs.sourceRepository }}
  {{- $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
  {{- if (eq $isObject false )}}
      {{ $key }}: {{ $value }}
  {{- else }}
      {{ $key }}:
  {{- range $depthKey, $depthValue := $value }}
        {{ $depthKey }}: {{ $depthValue }}
  {{- end }}
  {{- end }}
  {{- end }}
{{- end }}

# Steps shared template
{{- define "step.shared.utility.timestamp" }}
            {{- if eq $.stepType "Bash" }}
            - STEP_TIMESTAMP=$(date +%s)
            {{- else }}
            - $STEP_TIMESTAMP=[int](Get-Date -UFormat %s -Millisecond 0)
            {{- end }}
            - write_output {{ $.resultResource }} "timestamp=$STEP_TIMESTAMP"
{{- end }}

{{- define "step.shared.default.onExecute" }}
  {{- $ := . }}
  {{- $default := ternary $.defaultGradle $.defaultMvn (eq $.buildTool "gradle") }}
          {{- if $.conf }}
            {{- range $cmd := $.conf.commands }}
            - {{ $cmd }}
            {{- end }}
          {{- else if (or (eq "maven" $.buildTool) (eq "gradle" $.buildTool)) }}
            - {{ $default }}
          {{- end }}
            {{ template "step.shared.utility.timestamp" . }}
{{- end }}


{{- define "step.shared.runtime" }}
  {{- $ := . }}
  {{- if or $.runtime $.javaVersion }}
        runtime:
          type: image
          image:
          {{- if $.runtime }}
            custom:
            {{- range $key, $value := $.runtime }}
              {{ $key }}: {{ $value }}
            {{- end }}
          {{- else }}
            auto:
              language: java
              versions:
                - {{ $.java }}
          {{- end }}
  {{- end }}
{{- end }}

# Shared template for onStart/onExecute/onSuccess/onFailure/onComplete
{{- define "step.shared.onHooks" }}
        {{- if $.conf.onStart }}
          onStart:
            {{- range $cmd := $.conf.onStart }}
            - {{ $cmd }}
            {{- end }}
        {{- end }}
        {{- if $.conf.onExecute }}
          onExecute:
            {{- range $cmd := $.conf.onExecute }}
            - {{ $cmd }}
            {{- end }}
        {{- end }}
        {{- if $.conf.onSuccess }}
          onSuccess:
            {{- range $cmd := $.conf.onSuccess }}
            - {{ $cmd }}
            {{- end }}
        {{- end }}
        {{- if $.conf.onFailure }}
          onFailure:
            {{- range $cmd := $.conf.onFailure }}
            - {{ $cmd }}
            {{- end }}
        {{- end }}
        {{- if $.conf.onComplete }}
          onComplete:
            {{- range $cmd := $.conf.onComplete }}
            - {{ $cmd }}
            {{- end }}
        {{- end }}
{{- end }}

# code quality step
{{- define "step.codeQuality.onExecute" }}
  {{- $ := . }}
  {{- $ := set $ "conf" $.values.configurations.steps.codeQuality }}
  {{- $ := set $ "resultResource" $.codeQualityResName }}
  {{- $ := set $ "defaultMvn" "mvn clean sonar:sonar" }}
  {{- $ := set $ "defaultGradle" "gradle clean sonar" }}
  {{- $ := set $ "isHooksAvailable" (and $.conf (or $.conf.onStart $.conf.onExecute $.conf.onSuccess $.conf.onFailure $.conf.onComplete)) }}
        {{- if $.isHooksAvailable }}
          {{ template "step.shared.onHooks" $ }}
        {{- else }}
          onExecute:
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.default.onExecute" $ }}
        {{- end }}
{{- end }}

# unit test step
{{- define "step.test.onExecute" }}
  {{- $ := . }}
  {{- $ := set $ "conf" $.values.configurations.steps.test }}
  {{- $ := set $ "resultResource" $.unitTestResName }}
  {{- $ := set $ "defaultMvn" "mvn clean test" }}
  {{- $ := set $ "defaultGradle" "gradle clean test" }}
  {{- $ := set $ "isHooksAvailable" (and $.conf (or $.conf.onStart $.conf.onExecute $.conf.onSuccess $.conf.onFailure $.conf.onComplete)) }}
        {{- if $.isHooksAvailable }}
          {{ template "step.shared.onHooks" $ }}
        {{- else }}
          onExecute:
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.default.onExecute" $ }}
            - save_tests {{ $.values.configurations.steps.test.reportFolder }}
        {{- end }}
{{- end }}

# lint step
{{- define "step.lint.onExecute" }}
  {{- $ := . }}
  {{- $ := set $ "conf" $.values.configurations.steps.lint }}
  {{- $ := set $ "resultResource" $.buildInfoResultResName }}
  {{- $ := set $ "defaultMvn" "mvn clean checkstyle:checkstyle" }}
  {{- $ := set $ "defaultGradle" "gradle clean lint" }}
  {{- $ := set $ "isHooksAvailable" (and $.conf (or $.conf.onStart $.conf.onExecute $.conf.onSuccess $.conf.onFailure $.conf.onComplete)) }}
  {{- $stepType := get . "stepType" }}
        {{- if $.isHooksAvailable }}
          {{ template "step.shared.onHooks" $ }}
        {{- else }}
          onExecute:
            - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
            {{ template "step.shared.default.onExecute" $ }}

            - cd ${res_{{ $.gitResName }}_resourcePath}
            {{- if eq $.stepType "Bash" }}
            - cp -r * $shared_workspace
            {{- else }}
            - Copy-Item -Force -Recurse * -Destination $shared_workspace
            {{- end }}
        {{- end }}
{{- end }}

# build step
{{- define "step.build.onExecute" }}
  {{- $ := . }}
  {{- $ := set $ "conf" $.values.configurations.steps.build }}
  {{- $ := set $ "resultResource" $.buildInfoResultResName }}
  {{- $ := set $ "defaultMvn" "mvn -Dmaven.test.skip=true install" }}
  {{- $ := set $ "defaultGradle" "gradle clean build -x test" }}
  {{- $ := set $ "isHooksAvailable" (and $.conf (or $.conf.onStart $.conf.onExecute $.conf.onSuccess $.conf.onFailure $.conf.onComplete)) }}
        {{- if $.isHooksAvailable }}
          {{ template "step.shared.onHooks" $ }}
        {{- else }}
          onExecute:
            - cd $shared_workspace{{ $.rootDirectory }}
            {{ template "step.shared.default.onExecute" $ }}
        {{- end }}
{{- end }}

# publish step
{{- define "step.publish.onExecute" }}
  {{- $ := . }}
  {{- $ := set $ "conf" $.values.configurations.steps.publish }}
  {{- $ := set $ "buildInfoResource" $.buildInfoResName }}
  {{- $ := set $ "resultResource" $.buildInfoResultResName }}
  {{- $ := set $ "defaultMvn" "mvn deploy" }}
  {{- $ := set $ "defaultGradle" "gradle deploy" }}
  {{- $ := set $ "isHooksAvailable" (and $.conf (or $.conf.onStart $.conf.onExecute $.conf.onSuccess $.conf.onFailure $.conf.onComplete)) }}
        {{- if $.isHooksAvailable }}
          {{ template "step.shared.onHooks" $ }}
        {{- else }}
          onExecute:
            {{- if eq $.buildTool "maven" }}
            - jf mvnc --server-id-resolve {{ $.values.inputs.integrations.artifactory }} --repo-resolve-snapshots {{ $.values.configurations.artifactory.resolverSnapshotRepo }} --repo-resolve-releases {{ $.values.configurations.artifactory.resolverReleaseRepo }} --server-id-deploy {{ $.values.inputs.integrations.artifactory }} --repo-deploy-snapshots {{ $.values.configurations.artifactory.deployerSnapshotRepo }} --repo-deploy-releases {{ $.values.configurations.artifactory.deployerReleaseRepo }}
            {{- end }}
            - cd $shared_workspace{{ $.rootDirectory }}
            {{ template "step.shared.default.onExecute" $ }}
            - jf rt bp ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER}
            - write_output {{ $.resultResource }} "buildName=${JFROG_CLI_BUILD_NAME}"
            - write_output {{ $.resultResource }} "buildNumber=${JFROG_CLI_BUILD_NUMBER}"
            - write_output {{ $.buildInfoResource }} "buildName=${JFROG_CLI_BUILD_NAME}"
            - write_output {{ $.buildInfoResource }} "buildNumber=${JFROG_CLI_BUILD_NUMBER}"
        {{- end }}
{{- end }}
# -----------------------------------------------------------------

# Resource definitions
resources:
  - name: {{ $gitResName }}
    type: GitRepo
    configuration:
      {{ template "res.gitRepo.config" . }}

  - name: {{ $codeQualityResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $unitTestResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoResultResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoResName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.inputs.integrations.artifactory }}
      buildName: ''
      buildNumber: ''

  {{- if $isCronTriggerEnabled }}
  - name: {{ $cronResName }}
    type: CronTrigger
    configuration:
      interval: '{{ .Values.controls.triggerBy.cron.expression }}'
  {{- end }}

  {{- if $isWebhookTriggerEnabled }}
  {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
  - name: "{{ $packageName }}_webhook_{{ $webhook.webhookName }}"
    type: IncomingWebhook
    configuration:
      webhookName: {{ $webhook.webhookName }}
  {{- end }}
  {{- end }}

# Pipeline definition
pipelines:
  - name: {{ $pipelineName }}
    configuration:
      jfrogCliVersion: {{ $jfrogCliVersion }}
      runtime:
        type: image
        image:
          {{- if .Values.metadata.runtime }}
          custom:
          {{ range $key, $value := .Values.metadata.runtime }}
            {{ $key }}: {{ $value }}
          {{- end }}
          {{- else }}
          auto:
            language: java
            versions:
              - {{ $javaVersion }}
          {{- end }}
      integrations:
        - name: {{ .Values.inputs.integrations.artifactory }}
        {{- if $isEmailNotificationsAvailable}}
        - name: {{ .Values.controls.notifications.email.integrationName }}
        {{- end }}
        {{- if $isSlackNotificationsAvailable }}
        - name: {{ .Values.controls.notifications.slack.integrationName }}
        {{- end }}

      # Setting nodePool
      {{- if .Values.metadata.nodePool }}
      nodePool: {{ .Values.metadata.nodePool }}
      {{- end }}

      # Setting pipeline retention
      {{- if $isRetentionEnabled }}
      retentionPolicy:
        {{ range $key, $value := $isRetentionEnabled }}
        {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}

    steps:
      - name: trigger_all
        type: {{ $stepType }}
        {{- if (or $isExternalTriggerAvailable $isCronTriggerEnabled $isWebhookTriggerEnabled) }}
        configuration:
          inputResources:
            # Enable trigger options via external resources
            {{- if $isExternalTriggerAvailable }}
            {{- range $resource := .Values.controls.triggerBy.externalResources }}
            - name: '{{ $resource.resourceName }}'
            {{- end }}
            {{- end }}

            # Enable cron trigger
            {{- if $isCronTriggerEnabled }}
            - name: {{ $cronResName }}
            {{- end }}

            # Enable incoming webhook triggers
            {{- if $isWebhookTriggerEnabled }}
            {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
            - name: "{{ $packageName }}_webhook_{{ $webhook.webhookName }}"
            {{- end }}
            {{- end }}
        {{- end }}
        execution:
          onExecute:
            - end_step success

      {{- if $isQualityEnabled }}
      - name: code_quality
        type: {{ $stepType }}
        configuration:
          {{ template "step.shared.runtime" .Values.configuration.codeQuality }}
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $codeQualityResName }}
        execution:
          {{ template "step.codeQuality.onExecute" $templateParams }}
      {{- end }}

      {{- if $isTestEnabled }}
      - name: unit_tests
        type: {{ $stepType }}
        configuration:
          {{ template "step.shared.runtime" .Values.configuration.test }}
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $unitTestResName }}
        execution:
          {{ template "step.test.onExecute" $templateParams }}
      {{- end }}

      {{- if $isLintEnabled }}
      - name: lint
        type: {{ $stepType }}
        configuration:
          affinityGroup: build
          {{ template "step.shared.runtime" .Values.configuration.lint }}
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
        execution:
          {{ template "step.lint.onExecute" $templateParams }}
      {{- end }}

      {{- if $isBuildEnabled }}
      - name: build
        type: {{ $stepType }}
        configuration:
          {{ template "step.shared.runtime" .Values.configuration.build }}
          affinityGroup: build
          inputSteps:
            {{- if $isLintEnabled }}
            - name: lint
              status:
                - success
            {{- else }}
            - name: trigger_all
            {{- end }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
        execution:
          {{ template "step.build.onExecute" $templateParams }}
      {{- end }}

      {{- if $isPublishEnabled }}
      - name: publish
        type: {{ $stepType }}
        configuration:
          {{ template "step.shared.runtime" .Values.configuration.publish }}
          affinityGroup: build
          inputSteps:
            {{- if $isBuildEnabled }}
            - name: build
              status:
                - success
            {{- end }}
            {{- if $isTestEnabled }}
            - name: unit_tests
              status:
                - success
            {{- end }}
            {{- if $isQualityEnabled }}
            - name: code_quality
              status:
                - success
            {{- end }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
            - name: {{ $buildInfoResName }}
        execution:
          {{ template "step.publish.onExecute" $templateParams }}
      {{- end }}

      {{- if $isXrayScanEnabled }}
      - name: xray_scan
        type: XrayScan
        configuration:
          {{ template "step.shared.runtime" .Values.configuration.xrayScan }}
          failOnScan: {{ default false .Values.configurations.steps.xrayScan.failOnScan }}
          inputResources:
            - name: {{ $buildInfoResName }}
      {{- end }}
