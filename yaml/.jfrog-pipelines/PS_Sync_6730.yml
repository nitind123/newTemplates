
resources:
  - name: S_PS_GPB_6187_002_GR
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: nitind123/newTemplates
      branches:
        include: {{gitBranch}}

  - name: S_PS_GoPublishBinary_6187_002_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: pipeline_S_PS_GoPublishBinary_6187_002
    configuration:
      nodePool: win_2019
    steps:
      - name: S_PS_GoPublishBinary_6187_002_1
        type: GoBuild
        configuration:
          inputResources:
            - name: S_PS_GPB_6187_002_GR
          integrations:
            - name: s_artifactory
          sourceLocation: "tests/Go/HelloWorld"
          resolverRepo: test-automation-go-virtual
        execution:
          onStart:
            - add_run_variables JFROG_CLI_BUILD_NUMBER=${run_id}
      - name: S_PS_GoPublishBinary_6187_002_2
        type: GoPublishBinary
        configuration:
          inputSteps:
            - name: S_PS_GoPublishBinary_6187_002_1
          outputResources:
            - name: S_PS_GoPublishBinary_6187_002_BuildInfo
          targetRepository: test-automation-go-local
          autoPublishBuildInfo: true
      - name: S_PS_GoPublishBinary_6187_002_3
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          inputResources:
            - name: S_PS_GoPublishBinary_6187_002_BuildInfo
        execution:
          onExecute:
            - |
              $buildInfoFilePath = (jfrog rt search "*/${JFROG_CLI_BUILD_NAME}/${run_id}*.json" | ConvertFrom-JSON)[0].path
              $artifactSha = (jfrog rt curl -XGET /api/storage/${buildInfoFilePath} | ConvertFrom-JSON).checksums.sha256
              if ( "${project_key}" -eq "" ) { $project="default" } else { $project="${project_key}" }
              $artifactPath = "${project}/${JFROG_CLI_BUILD_NAME}/${run_id}"
              $headers = @{}
              $headers['Authorization'] = "Bearer $builder_api_token"
              $stepArtifact = Invoke-RestMethod -Method Get -ContentType 'application/json' -Headers $headers -Uri "${pipelines_api_url}/stepArtifacts?artifactPath=${artifactPath}&artifactSha=${artifactSha}&artifactType=buildInfo" -UseBasicParsing
              jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
              if ( $stepArtifact.artifactSha -ne $artifactSha ) { throw "SHA doesn't match" }
