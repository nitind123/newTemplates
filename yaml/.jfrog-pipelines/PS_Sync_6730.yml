template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_NpmPublish_5849_018_GitRepo
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: nitind123/newTemplates
      branches:
        include: {{gitBranch}}
  - name: S_NpmPublish_5849_018_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: NpmPublish
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: node
            versions:
              - 16
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:
      - name: S_NpmPublish_5849_018_1
        type: NpmBuild
        configuration:
          sourceLocation: "yaml/.jfrog-pipelines/npm"
          resolverRepo: "test-automation-npm-remote"
          inputResources:
            - name: S_NpmPublish_5849_018_GitRepo
          integrations:
            - name: s_artifactory
        execution:
          onStart:
            - replace_envs ${res_S_NpmPublish_5849_018_GitRepo_resourcePath}/yaml/.jfrog-pipelines/npm/package.json
      - name: S_NpmPublish_5849_018_2
        type: NpmPublish
        configuration:
          autoPublishBuildInfo: true
          deployerRepo: "test-automation-npm-local"
          inputSteps:
            - name: S_NpmPublish_5849_018_1
          outputResources:
            - name: S_NpmPublish_5849_018_BuildInfo
          integrations:
            - name: s_artifactory
      - name: S_NpmPublish_5849_018_3
        type: Bash
        configuration:
          inputSteps:
            - name: S_NpmPublish_5849_018_2
          integrations:
            - name: s_artifactory
        execution:
          onExecute:
            - buildInfoFilePath=$(jfrog rt search "*/${JFROG_CLI_BUILD_NAME}/${run_id}*.json" | jq -r '.[0].path')
            - buildInfoFileData=$(jfrog rt curl -XGET /api/storage/${buildInfoFilePath})
            - artifactSha=$(echo $buildInfoFileData | jq -r '.checksums.sha256')
            - if [ -z "${project_key}" ]; then project="default"; else project="${project_key}"; fi
            - artifactPath="${project}/${JFROG_CLI_BUILD_NAME}/${run_id}"
            - "stepArtifact=$(curl -sS -H \"Authorization: Bearer $builder_api_token\" -H 'Content-Type: application/json' \"${pipelines_api_url}/stepArtifacts?artifactPath=${artifactPath}&artifactSha=${artifactSha}&artifactType=buildInfo\")"
            - jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
            - stepArtifactSha=$(echo $stepArtifact | jq -r '.artifactSha')
            - if [ "$stepArtifactSha" != "$artifactSha" ]; then return 1; fi
